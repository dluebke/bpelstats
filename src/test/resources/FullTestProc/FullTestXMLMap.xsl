<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="FullTestXMLMap.map" md5sum="588b24376c56ec264ff80b4a5bd9d73e" version="7.0.500" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.500
*
*   Mapping file:		FullTestXMLMap.map
*   Map declaration(s):	FullTestXMLMap
*   Input file(s):		file:/C:/workspaces/ibm/prozesse/FullTestLib/Person.xsd
*   Output file(s):		file:/C:/workspaces/ibm/prozesse/FullTestLib/Stuff.xsd
*   XSLT import(s):   	FullTestXMLMap_XSLT.xsl
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:exsl="http://exslt.org/common"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:io="http://FullTestLib"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xsd4xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:CustomJavaMapping="xalan://test.CustomJavaMapping"
    xmlns:map="http://FullTestProc/FullTestXMLMap"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="xalan str set msl math CustomJavaMapping map exsl date"
    version="1.0">

  <!-- imports  -->
  <xsl:import href="FullTestXMLMap_XSLT.xsl"/>
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <msl:datamap>
      <xsl:choose>
        <xsl:when test="msl:datamap/dataObject[1]/@xsi:nil">
          <dataObject>
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io:Stuff'"/>
            </xsl:attribute>
            <xsl:attribute name="xsi:nil">
              <xsl:text>true</xsl:text>
            </xsl:attribute>
          </dataObject>
        </xsl:when>
        <xsl:otherwise>
          <dataObject>
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io:Stuff'"/>
            </xsl:attribute>
            <xsl:call-template name="map:FullTestXMLMap">
              <xsl:with-param name="Person" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </dataObject>
        </xsl:otherwise>
      </xsl:choose>
    </msl:datamap>
  </xsl:template>

  <!-- This rule represents a type mapping: "Person" to "io:Stuff".  -->
  <xsl:template name="map:FullTestXMLMap">
    <xsl:param name="Person"/>
    <!-- a for-each transform: "kontaktdaten"(Kontaktdaten) to "stuff"(Stuff) -->
    <xsl:apply-templates select="$Person/kontaktdaten" mode="localKontaktdatenToStuff_1813008055"/>
    <!-- a simple data mapping: "$Person/vorname"(string) to "field1"(string) -->
    <xsl:if test="$Person/vorname">
      <field1>
        <xsl:value-of select="$Person/vorname"/>
      </field1>
    </xsl:if>
    <!-- a simple data mapping: "$Person/nachname"(string) to "field2"(string) -->
    <xsl:if test="$Person/nachname">
      <field2>
        <!-- variables for custom code -->
        <xsl:variable name="nachname" select="$Person/nachname"/>
        <xsl:variable name="geburtsdatum" select="$Person/geburtsdatum"/>
        <xsl:value-of select="CustomJavaMapping:mapStuff($nachname,$geburtsdatum)"/>
      </field2>
    </xsl:if>
    <!-- a simple data mapping: "$Person/geburtsdatum"(date) to "field3"(string) -->
    <xsl:if test="$Person/geburtsdatum">
      <field3>
        <!-- variables for custom code -->
        <xsl:variable name="geburtsdatum1" select="$Person/geburtsdatum"/>
        <xsl:call-template name="GeburtsdatumToField3">
          <xsl:with-param name="geburtsdatum1" select="$geburtsdatum1"/>
        </xsl:call-template>
      </field3>
    </xsl:if>
    <!-- a simple data mapping: "$Person/kontaktdaten"(Kontaktdaten) to "field4"(string) -->
    <xsl:if test="$Person/kontaktdaten">
      <field4>
        <!-- variables for custom code -->
        <xsl:variable name="kontaktdaten" select="$Person/kontaktdaten"/>
        <xsl:value-of select="count($kontaktdaten)"/>
      </field4>
    </xsl:if>
  </xsl:template>

  <!-- This rule represents a for-each transform: "kontaktdaten" to "stuff".  -->
  <xsl:template match="kontaktdaten"  mode="localKontaktdatenToStuff_1813008055">
    <stuff>
      <!-- variables for custom code -->
      <xsl:variable name="field1" select="field1"/>
      <xsl:if test="string-length($field1) &lt; 100">
        <!-- a simple data mapping: "field1"(string) to "field1"(string) -->
        <field1>
          <xsl:value-of select="field1"/>
        </field1>
      </xsl:if>
      <!-- a simple data mapping: "field2"(string) to "field2"(string) -->
      <xsl:if test="field2">
        <field2>
          <xsl:value-of select="field2"/>
        </field2>
      </xsl:if>
      <!-- a simple data mapping: "field3"(string) to "field3"(string) -->
      <xsl:if test="field3">
        <field3>
          <xsl:value-of select="field3"/>
        </field3>
      </xsl:if>
      <!-- a simple data mapping: "field4"(string) to "field4"(string) -->
      <xsl:if test="field4">
        <field4>
          <xsl:value-of select="field4"/>
        </field4>
      </xsl:if>
    </stuff>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
